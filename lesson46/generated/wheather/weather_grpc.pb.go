// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: weather.proto

package wheather

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WitherServerClient is the client API for WitherServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WitherServerClient interface {
	GetCurrentWeather(ctx context.Context, in *CurrentWeatherRequest, opts ...grpc.CallOption) (*CurrentWeatherRespons, error)
	GetWeatherForecast(ctx context.Context, in *WeatherForecastRequest, opts ...grpc.CallOption) (*WeatherForecastRespons, error)
	ReportWeatherCondition(ctx context.Context, in *IsTrafficRequest, opts ...grpc.CallOption) (*IsTraficRespons, error)
}

type witherServerClient struct {
	cc grpc.ClientConnInterface
}

func NewWitherServerClient(cc grpc.ClientConnInterface) WitherServerClient {
	return &witherServerClient{cc}
}

func (c *witherServerClient) GetCurrentWeather(ctx context.Context, in *CurrentWeatherRequest, opts ...grpc.CallOption) (*CurrentWeatherRespons, error) {
	out := new(CurrentWeatherRespons)
	err := c.cc.Invoke(ctx, "/protos.WitherServer/GetCurrentWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witherServerClient) GetWeatherForecast(ctx context.Context, in *WeatherForecastRequest, opts ...grpc.CallOption) (*WeatherForecastRespons, error) {
	out := new(WeatherForecastRespons)
	err := c.cc.Invoke(ctx, "/protos.WitherServer/GetWeatherForecast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *witherServerClient) ReportWeatherCondition(ctx context.Context, in *IsTrafficRequest, opts ...grpc.CallOption) (*IsTraficRespons, error) {
	out := new(IsTraficRespons)
	err := c.cc.Invoke(ctx, "/protos.WitherServer/ReportWeatherCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WitherServerServer is the server API for WitherServer service.
// All implementations must embed UnimplementedWitherServerServer
// for forward compatibility
type WitherServerServer interface {
	GetCurrentWeather(context.Context, *CurrentWeatherRequest) (*CurrentWeatherRespons, error)
	GetWeatherForecast(context.Context, *WeatherForecastRequest) (*WeatherForecastRespons, error)
	ReportWeatherCondition(context.Context, *IsTrafficRequest) (*IsTraficRespons, error)
	mustEmbedUnimplementedWitherServerServer()
}

// UnimplementedWitherServerServer must be embedded to have forward compatible implementations.
type UnimplementedWitherServerServer struct {
}

func (UnimplementedWitherServerServer) GetCurrentWeather(context.Context, *CurrentWeatherRequest) (*CurrentWeatherRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWeather not implemented")
}
func (UnimplementedWitherServerServer) GetWeatherForecast(context.Context, *WeatherForecastRequest) (*WeatherForecastRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeatherForecast not implemented")
}
func (UnimplementedWitherServerServer) ReportWeatherCondition(context.Context, *IsTrafficRequest) (*IsTraficRespons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportWeatherCondition not implemented")
}
func (UnimplementedWitherServerServer) mustEmbedUnimplementedWitherServerServer() {}

// UnsafeWitherServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WitherServerServer will
// result in compilation errors.
type UnsafeWitherServerServer interface {
	mustEmbedUnimplementedWitherServerServer()
}

func RegisterWitherServerServer(s grpc.ServiceRegistrar, srv WitherServerServer) {
	s.RegisterService(&WitherServer_ServiceDesc, srv)
}

func _WitherServer_GetCurrentWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentWeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitherServerServer).GetCurrentWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.WitherServer/GetCurrentWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitherServerServer).GetCurrentWeather(ctx, req.(*CurrentWeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitherServer_GetWeatherForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitherServerServer).GetWeatherForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.WitherServer/GetWeatherForecast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitherServerServer).GetWeatherForecast(ctx, req.(*WeatherForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WitherServer_ReportWeatherCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTrafficRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WitherServerServer).ReportWeatherCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.WitherServer/ReportWeatherCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WitherServerServer).ReportWeatherCondition(ctx, req.(*IsTrafficRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WitherServer_ServiceDesc is the grpc.ServiceDesc for WitherServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WitherServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.WitherServer",
	HandlerType: (*WitherServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentWeather",
			Handler:    _WitherServer_GetCurrentWeather_Handler,
		},
		{
			MethodName: "GetWeatherForecast",
			Handler:    _WitherServer_GetWeatherForecast_Handler,
		},
		{
			MethodName: "ReportWeatherCondition",
			Handler:    _WitherServer_ReportWeatherCondition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weather.proto",
}
